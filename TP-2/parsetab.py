
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'and auto break case char comma const continue default do double else enum extern float fn for goto if in int int16_t int32_t int64_t int8_t long not number or plus register return semicolon short signed size_t sizeof ssize_t static stdin stdout string struct switch times typeodef uint16_t uint32_t uint64_t uint8_t union unsigned var void volatile whilestatement : stdout arguments semicolonarguments : arguments comma expression\n        | expressionexpression : expression plus term\n        | expression times term\n        | termterm : number\n        | string'
    
_lr_action_items = {'stdout':([0,],[2,]),'$end':([1,8,],[0,-1,]),'number':([2,9,10,11,],[6,6,6,6,]),'string':([2,9,10,11,],[7,7,7,7,]),'semicolon':([3,4,5,6,7,12,13,14,],[8,-3,-6,-7,-8,-2,-4,-5,]),'comma':([3,4,5,6,7,12,13,14,],[9,-3,-6,-7,-8,-2,-4,-5,]),'plus':([4,5,6,7,12,13,14,],[10,-6,-7,-8,10,-4,-5,]),'times':([4,5,6,7,12,13,14,],[11,-6,-7,-8,11,-4,-5,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'arguments':([2,],[3,]),'expression':([2,9,],[4,12,]),'term':([2,9,10,11,],[5,5,13,14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> stdout arguments semicolon','statement',3,'p_statement','rename.py',130),
  ('arguments -> arguments comma expression','arguments',3,'p_arguments','rename.py',134),
  ('arguments -> expression','arguments',1,'p_arguments','rename.py',135),
  ('expression -> expression plus term','expression',3,'p_expression','rename.py',142),
  ('expression -> expression times term','expression',3,'p_expression','rename.py',143),
  ('expression -> term','expression',1,'p_expression','rename.py',144),
  ('term -> number','term',1,'p_term','rename.py',151),
  ('term -> string','term',1,'p_term','rename.py',152),
]
