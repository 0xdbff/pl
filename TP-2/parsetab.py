
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left+-left*/rightUMINUSNAME NUMBER PRINT STRING VARstatement : PRINT argumentsstatement : var_declarationarguments : arguments ',' expression\n        | expressionstatement : VAR var_declaration_listvar_declaration_list : var_declaration_list ',' var_declaration\n        | var_declarationvar_declaration : NAME '=' expression\n        | NAMEexpression : expression '+' expression\n        | expression '-' expression\n        | expression '*' expression\n        | expression '/' expressionexpression : '-' expression %prec UMINUSexpression : '(' expression ')'expression : NUMBERexpression : NAMEexpression : STRING"
    
_lr_action_items = {'PRINT':([0,],[2,]),'VAR':([0,],[4,]),'NAME':([0,2,4,8,9,15,16,17,18,19,20,23,],[5,11,5,11,11,11,11,11,11,11,11,5,]),'$end':([1,3,5,6,7,10,11,12,13,14,21,24,25,26,27,28,29,30,31,],[0,-2,-9,-1,-4,-16,-17,-18,-5,-7,-14,-8,-3,-10,-11,-12,-13,-15,-6,]),'-':([2,7,8,9,10,11,12,15,16,17,18,19,20,21,22,24,25,26,27,28,29,30,],[8,18,8,8,-16,-17,-18,8,8,8,8,8,8,-14,18,18,18,-10,-11,-12,-13,-15,]),'(':([2,8,9,15,16,17,18,19,20,],[9,9,9,9,9,9,9,9,9,]),'NUMBER':([2,8,9,15,16,17,18,19,20,],[10,10,10,10,10,10,10,10,10,]),'STRING':([2,8,9,15,16,17,18,19,20,],[12,12,12,12,12,12,12,12,12,]),'=':([5,],[15,]),',':([5,6,7,10,11,12,13,14,21,24,25,26,27,28,29,30,31,],[-9,16,-4,-16,-17,-18,23,-7,-14,-8,-3,-10,-11,-12,-13,-15,-6,]),'+':([7,10,11,12,21,22,24,25,26,27,28,29,30,],[17,-16,-17,-18,-14,17,17,17,-10,-11,-12,-13,-15,]),'*':([7,10,11,12,21,22,24,25,26,27,28,29,30,],[19,-16,-17,-18,-14,19,19,19,19,19,-12,-13,-15,]),'/':([7,10,11,12,21,22,24,25,26,27,28,29,30,],[20,-16,-17,-18,-14,20,20,20,20,20,-12,-13,-15,]),')':([10,11,12,21,22,26,27,28,29,30,],[-16,-17,-18,-14,30,-10,-11,-12,-13,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'var_declaration':([0,4,23,],[3,14,31,]),'arguments':([2,],[6,]),'expression':([2,8,9,15,16,17,18,19,20,],[7,21,22,24,25,26,27,28,29,]),'var_declaration_list':([4,],[13,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> PRINT arguments','statement',2,'p_statement_print','grammar.py',22),
  ('statement -> var_declaration','statement',1,'p_statemnet_setvar','grammar.py',26),
  ('arguments -> arguments , expression','arguments',3,'p_arguments_expression','grammar.py',30),
  ('arguments -> expression','arguments',1,'p_arguments_expression','grammar.py',31),
  ('statement -> VAR var_declaration_list','statement',2,'p_statement_var','grammar.py',48),
  ('var_declaration_list -> var_declaration_list , var_declaration','var_declaration_list',3,'p_var_declaration_list','grammar.py',52),
  ('var_declaration_list -> var_declaration','var_declaration_list',1,'p_var_declaration_list','grammar.py',53),
  ('var_declaration -> NAME = expression','var_declaration',3,'p_var_declaration','grammar.py',60),
  ('var_declaration -> NAME','var_declaration',1,'p_var_declaration','grammar.py',61),
  ('expression -> expression + expression','expression',3,'p_expression_binop','grammar.py',68),
  ('expression -> expression - expression','expression',3,'p_expression_binop','grammar.py',69),
  ('expression -> expression * expression','expression',3,'p_expression_binop','grammar.py',70),
  ('expression -> expression / expression','expression',3,'p_expression_binop','grammar.py',71),
  ('expression -> - expression','expression',2,'p_expression_uminus','grammar.py',75),
  ('expression -> ( expression )','expression',3,'p_expression_group','grammar.py',79),
  ('expression -> NUMBER','expression',1,'p_expression_number','grammar.py',83),
  ('expression -> NAME','expression',1,'p_expression_name','grammar.py',87),
  ('expression -> STRING','expression',1,'p_expression_string','grammar.py',91),
]
