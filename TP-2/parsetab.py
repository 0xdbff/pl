
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-left*/rightUMINUSNAME NUMBER PRINT VARstatement : PRINT expressionstatement : VAR NAME "=" expressionstatement : expressionexpression : expression \'+\' expression\n        | expression \'-\' expression\n        | expression \'*\' expression\n        | expression \'/\' expressionexpression : \'-\' expression %prec UMINUSexpression : \'(\' expression \')\'expression : NUMBERexpression : NAME'
    
_lr_action_items = {'PRINT':([0,],[2,]),'VAR':([0,],[4,]),'-':([0,2,3,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,],[6,6,11,-11,6,6,-10,11,6,6,6,6,-8,11,-4,-5,-6,-7,6,-9,11,]),'(':([0,2,6,7,10,11,12,13,21,],[7,7,7,7,7,7,7,7,7,]),'NUMBER':([0,2,6,7,10,11,12,13,21,],[8,8,8,8,8,8,8,8,8,]),'NAME':([0,2,4,6,7,10,11,12,13,21,],[5,5,14,5,5,5,5,5,5,5,]),'$end':([1,3,5,8,9,15,17,18,19,20,22,23,],[0,-3,-11,-10,-1,-8,-4,-5,-6,-7,-9,-2,]),'+':([3,5,8,9,15,16,17,18,19,20,22,23,],[10,-11,-10,10,-8,10,-4,-5,-6,-7,-9,10,]),'*':([3,5,8,9,15,16,17,18,19,20,22,23,],[12,-11,-10,12,-8,12,12,12,-6,-7,-9,12,]),'/':([3,5,8,9,15,16,17,18,19,20,22,23,],[13,-11,-10,13,-8,13,13,13,-6,-7,-9,13,]),')':([5,8,15,16,17,18,19,20,22,],[-11,-10,-8,22,-4,-5,-6,-7,-9,]),'=':([14,],[21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,2,6,7,10,11,12,13,21,],[3,9,15,16,17,18,19,20,23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> PRINT expression','statement',2,'p_statement_print','grammar.py',24),
  ('statement -> VAR NAME = expression','statement',4,'p_statement_var','grammar.py',30),
  ('statement -> expression','statement',1,'p_statement_expr','grammar.py',37),
  ('expression -> expression + expression','expression',3,'p_expression_binop','grammar.py',41),
  ('expression -> expression - expression','expression',3,'p_expression_binop','grammar.py',42),
  ('expression -> expression * expression','expression',3,'p_expression_binop','grammar.py',43),
  ('expression -> expression / expression','expression',3,'p_expression_binop','grammar.py',44),
  ('expression -> - expression','expression',2,'p_expression_uminus','grammar.py',48),
  ('expression -> ( expression )','expression',3,'p_expression_group','grammar.py',52),
  ('expression -> NUMBER','expression',1,'p_expression_number','grammar.py',56),
  ('expression -> NAME','expression',1,'p_expression_name','grammar.py',60),
]
