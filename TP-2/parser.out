Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> PRINT arguments
Rule 2     statement -> var_declaration
Rule 3     arguments -> arguments , expression
Rule 4     arguments -> expression
Rule 5     statement -> VAR var_declaration_list
Rule 6     var_declaration_list -> var_declaration_list , var_declaration
Rule 7     var_declaration_list -> var_declaration
Rule 8     var_declaration -> NAME = expression
Rule 9     var_declaration -> NAME
Rule 10    expression -> expression + expression
Rule 11    expression -> expression - expression
Rule 12    expression -> expression * expression
Rule 13    expression -> expression / expression
Rule 14    expression -> - expression
Rule 15    expression -> ( expression )
Rule 16    expression -> NUMBER
Rule 17    expression -> NAME
Rule 18    expression -> STRING

Terminals, with rules where they appear

(                    : 15
)                    : 15
*                    : 12
+                    : 10
,                    : 3 6
-                    : 11 14
/                    : 13
=                    : 8
NAME                 : 8 9 17
NUMBER               : 16
PRINT                : 1
STRING               : 18
VAR                  : 5
error                : 

Nonterminals, with rules where they appear

arguments            : 1 3
expression           : 3 4 8 10 10 11 11 12 12 13 13 14 15
statement            : 0
var_declaration      : 2 6 7
var_declaration_list : 5 6

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . PRINT arguments
    (2) statement -> . var_declaration
    (5) statement -> . VAR var_declaration_list
    (8) var_declaration -> . NAME = expression
    (9) var_declaration -> . NAME

    PRINT           shift and go to state 2
    VAR             shift and go to state 4
    NAME            shift and go to state 5

    statement                      shift and go to state 1
    var_declaration                shift and go to state 3

state 1

    (0) S' -> statement .



state 2

    (1) statement -> PRINT . arguments
    (3) arguments -> . arguments , expression
    (4) arguments -> . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . - expression
    (15) expression -> . ( expression )
    (16) expression -> . NUMBER
    (17) expression -> . NAME
    (18) expression -> . STRING

    -               shift and go to state 8
    (               shift and go to state 9
    NUMBER          shift and go to state 10
    NAME            shift and go to state 11
    STRING          shift and go to state 12

    arguments                      shift and go to state 6
    expression                     shift and go to state 7

state 3

    (2) statement -> var_declaration .

    $end            reduce using rule 2 (statement -> var_declaration .)


state 4

    (5) statement -> VAR . var_declaration_list
    (6) var_declaration_list -> . var_declaration_list , var_declaration
    (7) var_declaration_list -> . var_declaration
    (8) var_declaration -> . NAME = expression
    (9) var_declaration -> . NAME

    NAME            shift and go to state 5

    var_declaration_list           shift and go to state 13
    var_declaration                shift and go to state 14

state 5

    (8) var_declaration -> NAME . = expression
    (9) var_declaration -> NAME .

    =               shift and go to state 15
    $end            reduce using rule 9 (var_declaration -> NAME .)
    ,               reduce using rule 9 (var_declaration -> NAME .)


state 6

    (1) statement -> PRINT arguments .
    (3) arguments -> arguments . , expression

    $end            reduce using rule 1 (statement -> PRINT arguments .)
    ,               shift and go to state 16


state 7

    (4) arguments -> expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    ,               reduce using rule 4 (arguments -> expression .)
    $end            reduce using rule 4 (arguments -> expression .)
    +               shift and go to state 17
    -               shift and go to state 18
    *               shift and go to state 19
    /               shift and go to state 20


state 8

    (14) expression -> - . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . - expression
    (15) expression -> . ( expression )
    (16) expression -> . NUMBER
    (17) expression -> . NAME
    (18) expression -> . STRING

    -               shift and go to state 8
    (               shift and go to state 9
    NUMBER          shift and go to state 10
    NAME            shift and go to state 11
    STRING          shift and go to state 12

    expression                     shift and go to state 21

state 9

    (15) expression -> ( . expression )
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . - expression
    (15) expression -> . ( expression )
    (16) expression -> . NUMBER
    (17) expression -> . NAME
    (18) expression -> . STRING

    -               shift and go to state 8
    (               shift and go to state 9
    NUMBER          shift and go to state 10
    NAME            shift and go to state 11
    STRING          shift and go to state 12

    expression                     shift and go to state 22

state 10

    (16) expression -> NUMBER .

    +               reduce using rule 16 (expression -> NUMBER .)
    -               reduce using rule 16 (expression -> NUMBER .)
    *               reduce using rule 16 (expression -> NUMBER .)
    /               reduce using rule 16 (expression -> NUMBER .)
    ,               reduce using rule 16 (expression -> NUMBER .)
    $end            reduce using rule 16 (expression -> NUMBER .)
    )               reduce using rule 16 (expression -> NUMBER .)


state 11

    (17) expression -> NAME .

    +               reduce using rule 17 (expression -> NAME .)
    -               reduce using rule 17 (expression -> NAME .)
    *               reduce using rule 17 (expression -> NAME .)
    /               reduce using rule 17 (expression -> NAME .)
    ,               reduce using rule 17 (expression -> NAME .)
    $end            reduce using rule 17 (expression -> NAME .)
    )               reduce using rule 17 (expression -> NAME .)


state 12

    (18) expression -> STRING .

    +               reduce using rule 18 (expression -> STRING .)
    -               reduce using rule 18 (expression -> STRING .)
    *               reduce using rule 18 (expression -> STRING .)
    /               reduce using rule 18 (expression -> STRING .)
    ,               reduce using rule 18 (expression -> STRING .)
    $end            reduce using rule 18 (expression -> STRING .)
    )               reduce using rule 18 (expression -> STRING .)


state 13

    (5) statement -> VAR var_declaration_list .
    (6) var_declaration_list -> var_declaration_list . , var_declaration

    $end            reduce using rule 5 (statement -> VAR var_declaration_list .)
    ,               shift and go to state 23


state 14

    (7) var_declaration_list -> var_declaration .

    ,               reduce using rule 7 (var_declaration_list -> var_declaration .)
    $end            reduce using rule 7 (var_declaration_list -> var_declaration .)


state 15

    (8) var_declaration -> NAME = . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . - expression
    (15) expression -> . ( expression )
    (16) expression -> . NUMBER
    (17) expression -> . NAME
    (18) expression -> . STRING

    -               shift and go to state 8
    (               shift and go to state 9
    NUMBER          shift and go to state 10
    NAME            shift and go to state 11
    STRING          shift and go to state 12

    expression                     shift and go to state 24

state 16

    (3) arguments -> arguments , . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . - expression
    (15) expression -> . ( expression )
    (16) expression -> . NUMBER
    (17) expression -> . NAME
    (18) expression -> . STRING

    -               shift and go to state 8
    (               shift and go to state 9
    NUMBER          shift and go to state 10
    NAME            shift and go to state 11
    STRING          shift and go to state 12

    expression                     shift and go to state 25

state 17

    (10) expression -> expression + . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . - expression
    (15) expression -> . ( expression )
    (16) expression -> . NUMBER
    (17) expression -> . NAME
    (18) expression -> . STRING

    -               shift and go to state 8
    (               shift and go to state 9
    NUMBER          shift and go to state 10
    NAME            shift and go to state 11
    STRING          shift and go to state 12

    expression                     shift and go to state 26

state 18

    (11) expression -> expression - . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . - expression
    (15) expression -> . ( expression )
    (16) expression -> . NUMBER
    (17) expression -> . NAME
    (18) expression -> . STRING

    -               shift and go to state 8
    (               shift and go to state 9
    NUMBER          shift and go to state 10
    NAME            shift and go to state 11
    STRING          shift and go to state 12

    expression                     shift and go to state 27

state 19

    (12) expression -> expression * . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . - expression
    (15) expression -> . ( expression )
    (16) expression -> . NUMBER
    (17) expression -> . NAME
    (18) expression -> . STRING

    -               shift and go to state 8
    (               shift and go to state 9
    NUMBER          shift and go to state 10
    NAME            shift and go to state 11
    STRING          shift and go to state 12

    expression                     shift and go to state 28

state 20

    (13) expression -> expression / . expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (14) expression -> . - expression
    (15) expression -> . ( expression )
    (16) expression -> . NUMBER
    (17) expression -> . NAME
    (18) expression -> . STRING

    -               shift and go to state 8
    (               shift and go to state 9
    NUMBER          shift and go to state 10
    NAME            shift and go to state 11
    STRING          shift and go to state 12

    expression                     shift and go to state 29

state 21

    (14) expression -> - expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    +               reduce using rule 14 (expression -> - expression .)
    -               reduce using rule 14 (expression -> - expression .)
    *               reduce using rule 14 (expression -> - expression .)
    /               reduce using rule 14 (expression -> - expression .)
    ,               reduce using rule 14 (expression -> - expression .)
    $end            reduce using rule 14 (expression -> - expression .)
    )               reduce using rule 14 (expression -> - expression .)

  ! +               [ shift and go to state 17 ]
  ! -               [ shift and go to state 18 ]
  ! *               [ shift and go to state 19 ]
  ! /               [ shift and go to state 20 ]


state 22

    (15) expression -> ( expression . )
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    )               shift and go to state 30
    +               shift and go to state 17
    -               shift and go to state 18
    *               shift and go to state 19
    /               shift and go to state 20


state 23

    (6) var_declaration_list -> var_declaration_list , . var_declaration
    (8) var_declaration -> . NAME = expression
    (9) var_declaration -> . NAME

    NAME            shift and go to state 5

    var_declaration                shift and go to state 31

state 24

    (8) var_declaration -> NAME = expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    $end            reduce using rule 8 (var_declaration -> NAME = expression .)
    ,               reduce using rule 8 (var_declaration -> NAME = expression .)
    +               shift and go to state 17
    -               shift and go to state 18
    *               shift and go to state 19
    /               shift and go to state 20


state 25

    (3) arguments -> arguments , expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    ,               reduce using rule 3 (arguments -> arguments , expression .)
    $end            reduce using rule 3 (arguments -> arguments , expression .)
    +               shift and go to state 17
    -               shift and go to state 18
    *               shift and go to state 19
    /               shift and go to state 20


state 26

    (10) expression -> expression + expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    +               reduce using rule 10 (expression -> expression + expression .)
    -               reduce using rule 10 (expression -> expression + expression .)
    ,               reduce using rule 10 (expression -> expression + expression .)
    $end            reduce using rule 10 (expression -> expression + expression .)
    )               reduce using rule 10 (expression -> expression + expression .)
    *               shift and go to state 19
    /               shift and go to state 20

  ! *               [ reduce using rule 10 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 10 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 17 ]
  ! -               [ shift and go to state 18 ]


state 27

    (11) expression -> expression - expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    +               reduce using rule 11 (expression -> expression - expression .)
    -               reduce using rule 11 (expression -> expression - expression .)
    ,               reduce using rule 11 (expression -> expression - expression .)
    $end            reduce using rule 11 (expression -> expression - expression .)
    )               reduce using rule 11 (expression -> expression - expression .)
    *               shift and go to state 19
    /               shift and go to state 20

  ! *               [ reduce using rule 11 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 11 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 17 ]
  ! -               [ shift and go to state 18 ]


state 28

    (12) expression -> expression * expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    +               reduce using rule 12 (expression -> expression * expression .)
    -               reduce using rule 12 (expression -> expression * expression .)
    *               reduce using rule 12 (expression -> expression * expression .)
    /               reduce using rule 12 (expression -> expression * expression .)
    ,               reduce using rule 12 (expression -> expression * expression .)
    $end            reduce using rule 12 (expression -> expression * expression .)
    )               reduce using rule 12 (expression -> expression * expression .)

  ! +               [ shift and go to state 17 ]
  ! -               [ shift and go to state 18 ]
  ! *               [ shift and go to state 19 ]
  ! /               [ shift and go to state 20 ]


state 29

    (13) expression -> expression / expression .
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    +               reduce using rule 13 (expression -> expression / expression .)
    -               reduce using rule 13 (expression -> expression / expression .)
    *               reduce using rule 13 (expression -> expression / expression .)
    /               reduce using rule 13 (expression -> expression / expression .)
    ,               reduce using rule 13 (expression -> expression / expression .)
    $end            reduce using rule 13 (expression -> expression / expression .)
    )               reduce using rule 13 (expression -> expression / expression .)

  ! +               [ shift and go to state 17 ]
  ! -               [ shift and go to state 18 ]
  ! *               [ shift and go to state 19 ]
  ! /               [ shift and go to state 20 ]


state 30

    (15) expression -> ( expression ) .

    +               reduce using rule 15 (expression -> ( expression ) .)
    -               reduce using rule 15 (expression -> ( expression ) .)
    *               reduce using rule 15 (expression -> ( expression ) .)
    /               reduce using rule 15 (expression -> ( expression ) .)
    ,               reduce using rule 15 (expression -> ( expression ) .)
    $end            reduce using rule 15 (expression -> ( expression ) .)
    )               reduce using rule 15 (expression -> ( expression ) .)


state 31

    (6) var_declaration_list -> var_declaration_list , var_declaration .

    ,               reduce using rule 6 (var_declaration_list -> var_declaration_list , var_declaration .)
    $end            reduce using rule 6 (var_declaration_list -> var_declaration_list , var_declaration .)

